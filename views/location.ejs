<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Parking Map</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-SgOJa3DmI69IUzQ2PVdRZhwQ+dy64/BUtbMJw1MZ8t5HZApcHrRKUc4W0kG879m7" crossorigin="anonymous">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel="stylesheet" href="/styles.css" />
 

  
</head>
<body>
    
    <%- include('partials/header') %>
    <div class="map-container">
        <h2 style="color: #2dd821;">Parking Locations</h2>
        <div id="map" style="height: 500px; margin: 20px auto; width: 90%; border-radius: 10px;"></div>
      
        <div style="text-align: center; margin: 20px;">
            <button id="findParkingBtn" onclick="findNearestParking()">Find Nearest Parking</button>
        </div>
      
        <div id="results" style="text-align:center; font-family:sans-serif;">
            <!-- Parking cards will be rendered here dynamically -->
        </div>
    </div>
    <%- include('partials/footer') %>
    
    <!-- Leaflet CDN -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.bundle.min.js" integrity="sha384-k6d4wzSIapyDyv1kpU366/PK5hCdSbCRGRCMv+eplOQJWyd1fbcAu9OCUj5zNLiq" crossorigin="anonymous"></script>
    
    <!-- Leaflet Routing Machine CDN -->
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
    
    <script>
        const parkingLocations = [
          { name: "Parking Lot A", lat: 12.968, lon: 80.221 ,cost:15,image:"/image.png"},
          { name: "Parking Lot B", lat: 12.970, lon: 80.225,cost:20 ,image:"/image1.png"},
          { name: "Parking Lot C", lat: 12.964, lon: 80.219,cost:30 ,image:"/image2.png"},
          { name: "Parking Lot D", lat: 13.179, lon: 80.098,cost:30 ,image:"/img3.webp"},
      
        ];

        let map, userLocationMarker;

        // Initialize Map and Get User Location
        function initializeMap() {
          navigator.geolocation.getCurrentPosition((position) => {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;

            map = L.map('map').setView([lat, lon], 15);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 19,
              attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            // Mark user's location on map
            userLocationMarker = L.marker([lat, lon]).addTo(map)
              .bindPopup('You are here.')
              .openPopup();
          }, () => {
            alert("Could not get your location");
          });
        }

        // Function to Find Nearest Parking
        function findNearestParking() {
          if (!map) {
            alert("Map not loaded yet!");
            return;
          }

          navigator.geolocation.getCurrentPosition((position) => {
            const userLat = position.coords.latitude;
            const userLon = position.coords.longitude;

            const sorted = parkingLocations
              .map(p => ({
                ...p,
                distance: getDistance(userLat, userLon, p.lat, p.lon)
              }))
              .sort((a, b) => a.distance - b.distance);

            // Clear previous markers (except tiles)
            map.eachLayer(layer => {
              if (layer instanceof L.Marker && layer !== userLocationMarker) map.removeLayer(layer);
            });

            // Re-add user location marker
            userLocationMarker.setLatLng([userLat, userLon]).bindPopup("You are here.").openPopup();

            // Add parking markers
            sorted.forEach(p => {
              L.marker([p.lat, p.lon])
                .addTo(map)
                .bindPopup(`${p.name}<br>${p.distance.toFixed(2)} km away`);
            });

            // Update the results with dynamic cards
            document.getElementById("results").innerHTML = `
              <div class="row">
                ${sorted.map(p => `
                  <div class="col-md-3">
                    <div class="div-container">
                      <img src="${p.image}" alt="${p.name}" >
                      <div style="display: flex; flex-direction: column;">
                        <div class="name-rating">
                          <h3>${p.name}</h3>
                          <p>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                              class="bi bi-star-fill" viewBox="0 0 16 16">
                              <path
                                d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                            </svg>
                            4.6
                          </p>
                        </div>

                        <div class="details">
                          <p style="color : red">$ ${p.cost} /-</p>
                          <h2>Vacent Slots: <%= locals.vacentSlots%></h2>
                          <h3>${p.distance.toFixed(2)} km</h3>
                          <input type="range" min="0" max="100" value="50" class="even-range">
                          <input type="button" value="Book" onclick="window.location.href='/book'" id="book-btn">
                        </div>
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            `;

            // Display Route to Nearest Parking (optional)
            const nearestParking = sorted[0]; // Nearest parking location
            displayRoute(userLat, userLon, nearestParking.lat, nearestParking.lon);

            // Set view to user location
            map.setView([userLat, userLon], 15);
          });
        }

        // Function to Calculate Distance between two points (Haversine formula)
        function getDistance(lat1, lon1, lat2, lon2) {
          const R = 6371; // Earth's radius in km
          const dLat = (lat2 - lat1) * Math.PI / 180;
          const dLon = (lon2 - lon1) * Math.PI / 180;
          const a =
            Math.sin(dLat / 2) ** 2 +
            Math.cos(lat1 * Math.PI / 180) *
            Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon / 2) ** 2;
          return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
        }

        // Function to Display Route from User to Nearest Parking
        function displayRoute(userLat, userLon, destinationLat, destinationLon) {
          L.Routing.control({
            waypoints: [
              L.latLng(userLat, userLon),
              L.latLng(destinationLat, destinationLon)
            ],
            routeWhileDragging: false,
            addWaypoints: false,
            show: false,
            lineOptions: {
              styles: [{ color: '#FF0000', weight: 4 }]
            },
            createMarker: function() { return null; } // Hide default markers
          }).addTo(map);
        }

        // Initialize map when page loads
        window.onload = initializeMap;
    </script>
</body>
</html>
